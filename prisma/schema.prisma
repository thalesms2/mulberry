generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brands {
  id          Int        @id @default(autoincrement())
  description String
  Products    Products[]

  @@map("brands")
}

model Groups {
  id          Int        @id @default(autoincrement())
  description String
  Products    Products[]

  @@map("groups")
}

model Products {
  id           Int            @id @default(autoincrement())
  description  String
  measurement  String
  cost         Decimal
  profit       Decimal
  price        Decimal
  Inventory    Inventory[]
  Items        Items[]
  Transactions Transactions[]
  brand        Brands[]
  group        Groups[]

  @@map("products")
}

model Transactions {
  id          Int      @id @default(autoincrement())
  type        String
  transaction String
  productId   Int
  quantity    Decimal
  cost        Decimal
  price       Decimal
  userId      Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  Product     Products @relation(fields: [productId], references: [id])
  User        Users    @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Inventory {
  id        Int      @id @default(autoincrement())
  productId Int
  quantity  Decimal
  Product   Products @relation(fields: [productId], references: [id])

  @@map("inventory")
}

model Users {
  id           Int            @id @default(autoincrement())
  name         String
  password     String
  Logs         Logs[]
  Transactions Transactions[]

  @@map("users")
}

model Logs {
  id          Int      @id @default(autoincrement())
  type        String
  description String
  userId      Int
  createdAt   DateTime @default(now()) @map("created_at")
  User        Users    @relation(fields: [userId], references: [id])

  @@map("logs")
}

model States {
  code  String  @id
  name  String
  Citys Citys[]

  @@map("states")
}

model Citys {
  code       Int       @id @default(autoincrement())
  name       String
  statesCode String
  state      States    @relation(fields: [statesCode], references: [code])
  Clients    Clients[]

  @@map("citys")
}

model Sellers {
  id        Int     @id @default(autoincrement())
  name      String
  comission Decimal
  Sells     Sells[]

  @@map("sellers")
}

model Clients {
  id           Int      @id @default(autoincrement())
  name         String
  cpf          String
  cityId       Int
  adress       String
  neighborhood String
  cep          String
  birth        DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  priceTable   Int
  City         Citys    @relation(fields: [cityId], references: [code])
  Sells        Sells[]

  @@map("clients")
}

model Sells {
  noteNumber Int      @unique
  emission   DateTime
  sellerId   Int
  clientId   Int
  priceTable Int
  quantity   Int
  discont    Decimal
  total      Decimal
  Client     Clients  @relation(fields: [clientId], references: [id])
  Seller     Sellers  @relation(fields: [sellerId], references: [id])
  Items      Items[]

  @@map("sells")
}

model Items {
  id           Int      @id @default(autoincrement())
  noteNumber   Int
  productId    Int
  unitaryPrice Decimal
  discount     Decimal
  total        Decimal
  Sell         Sells    @relation(fields: [noteNumber], references: [noteNumber])
  Product      Products @relation(fields: [productId], references: [id])

  @@map("items")
}

model Company {
  id   Int    @id @default(autoincrement())
  name String

  @@map("company")
}

model Measurements {
  id          Int    @id @default(autoincrement())
  description String
  initials    String

  @@map("measurements")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brands {
  id          Int        @id
  description String
  Products    Products[]

  @@map("brands")
}

model Groups {
  id          Int        @id
  description String
  Products    Products[]

  @@map("groups")
}

model Measurements {
  id          Int    @id
  description String
  initials    String

  @@map("measurements")
}

model Products {
  id           Int            @id
  description  String
  measurement  String
  cost         Decimal
  profit       Decimal
  price        Decimal
  Inventory    Inventory[]
  Items        Items[]
  Transactions Transactions[]
  brand        Brands[]
  group        Groups[]

  @@map("products")
}

model Transactions {
  id          Int      @id
  type        String
  transaction String
  productId   Int
  quantity    Decimal
  cost        Decimal
  price       Decimal
  userId      Int
  Product     Products @relation(fields: [productId], references: [id])
  User        Users    @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Inventory {
  id        Int      @id
  productId Int
  quantity  Decimal
  Product   Products @relation(fields: [productId], references: [id])

  @@map("inventory")
}

model Users {
  id           Int            @id
  name         String
  password     String
  type         String
  Logs         Logs[]
  Transactions Transactions[]
  Task         Task[]

  @@map("users")
}

model Logs {
  id          Int      @id @default(autoincrement())
  type        String
  description String
  userId      Int
  createdAt   DateTime @default(now()) @map("created_at")
  User        Users    @relation(fields: [userId], references: [id])

  @@map("logs")
}

model States {
  code  String  @id
  name  String
  Citys Citys[]

  @@map("states")
}

model Citys {
  code       Int       @id
  name       String
  statesCode String
  state      States    @relation(fields: [statesCode], references: [code])
  Clients    Clients[]

  @@map("citys")
}

model Sellers {
  id        Int     @id
  name      String
  comission Decimal
  Sells     Sells[]

  @@map("sellers")
}

model Clients {
  id           Int     @id
  name         String
  cpf          String
  cityId       Int
  street       String
  neighborhood String
  adressNumber String
  cep          String
  complement   String
  City         Citys   @relation(fields: [cityId], references: [code])
  Sells        Sells[]

  @@map("clients")
}

model Sells {
  emission   DateTime
  sellerId   Int
  clientId   Int
  priceTable Int
  quantity   Int
  discont    Decimal
  total      Decimal
  noteNumber Int      @unique
  Client     Clients  @relation(fields: [clientId], references: [id])
  Seller     Sellers  @relation(fields: [sellerId], references: [id])
  Items      Items[]

  @@map("sells")
}

model Items {
  id           Int      @id
  productId    Int
  unitaryPrice Decimal
  discount     Decimal
  total        Decimal
  noteNumber   Int
  Sell         Sells    @relation(fields: [noteNumber], references: [noteNumber])
  entryNumber  Int
  Entry        Entry    @relation(fields: [entryNumber], references: [id])
  Product      Products @relation(fields: [productId], references: [id])

  @@map("items")
}

model Company {
  id   Int    @id
  name String

  @@map("company")
}

model Deposit {
  id          Int    @id
  name        String
  description String
  @@map("deposit")
}

model Entry {
  id       Int     @id
  provider String
  cost     Decimal
  Items    Items[]

  @@map("entry")
}

model Task {
  id          Int     @id
  description String
  status      Boolean
  userId      Int
  user        Users   @relation(fields: [userId], references: [id])

  @@map("task")
}
